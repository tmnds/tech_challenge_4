R2-Score positive
R2-Score > 0.5
validation_loss < 0.2
RMSE < 2

loss (training) < 0.1 for convergence




RMSE > 2
activation1 : 11 relu vs. 27 sigm
optim : 17 adam vs. 21 SGD
dropout1 : 16 [0.1] vs. 22 None
reg_kernel1 : 22 [0.01] vs. 16 None
Dense_mid: 22 [10] vs. 16 None

RMSE > 5
*Check activation function
--------------------------------
sigmoid + adam = 11
sigmoid + SGD = 16
relu + SGD = 4
relu + adam = 1

*better to use adam
*better to use relu

--------------------------------
sigmoid + dropout[0.1] = 12
sigmoid + dropout[None] = 15
relu + dropout[0.1] = 1
relu + dropout[None] = 4

*better to use dropout = 0.1
*better to use relu

--------------------------------
sigmoid + reg_kernel[0.01] = 16
sigmoid + reg_kernel[None] = 11
relu + reg_kernel[None] = 3
relu + reg_kernel[0.01] = 2

*better to use relu
*unclear to use reg_kernel or not




*Check optim
--------------------------------
adam + droput[0.1] = 4
SGD + droput[0.1] = 9
adam + droput[None] = 8
SGD + droput[None] = 11

*better to use adam

--------------------------------
adam + reg_kernel[0.01] = 8
SGD + reg_kernel[0.01] = 10
adam + reg_kernel[None] = 4
SGD + reg_kernel[None] = 10

*better to use adam
*reg_kernel unclear

*Check optim: use adam
--------------------------------
RMS > 5
adam = 12
SGD = 20

RMSE < 0.7
adam = 2
SGD = 0

*Check activation: use relu
--------------------------------
RMS > 5
relu = 5
sigmoid = 27

RMSE < 0.7
relu = 2
sigmoid = 0

*Check dropout: use dropout, check more values
--------------------------------
RMS > 5
[0.1] = 13
None = 19

RMSE < 0.7
[0.1] = 2
None = 0

*Check dense_mid_size: unclear, check more values
--------------------------------
RMS > 5
[10] = 16
None = 16

RMSE < 0.7
[10] = 2
None = 0

*Check n_inputs: unclear, check again
--------------------------------
RMS > 5
[1] = 15
[3] = 17

RMSE < 0.7
[1] = 2
[3] = 0

*Check reg_kernel: unclear, check again
--------------------------------
RMS > 5
[0.01] = 18
None = 14

RMSE < 0.7
[0.01] = 1
None = 1

################################################

*Check reg_kernel: better low values or None
--------------------------------
RMS > 5
[0.1] = 4
[None, 0.01, 0.001] = 0

RMSE < 0.7
[0.1] = 0
[None, 0.01, 0.001] = 4

*best kernel (l2) = 0.001



*Check dropout: inconclusive for which value, tending to 0.1
--------------------------------
RMS > 5
[0.1] = 2
[0.05, 0.2] = [1, 1]

RMSE < 0.7
[0.05] = 3
[0.1] = 1
[0.2] = 2


*Check dense_mid_size: better None or More instead of few, check more values NOT None
--------------------------------
RMS > 5
[None, 10] = 1
[5] = 2
[20] = 0

RMSE < 0.7
[None] = 2
[5, 10] = 1
[20] = 2




*Check n_inputs: unclear, check again
--------------------------------
RMS > 5
[1] = 2
[3] = 2

RMS > 2
[1] = 21
[3] = 16

RMS > 1
[1] = 38
[3] = 39

RMSE < 0.7
[1] = 5
[3] = 1

* also similar in terms of valid loss
* in terms of RMSE, best models tending to [1] input


################################################
*Check n_inputs: best 1 input only
--------------------------------
RMS > 5
0

RMSE < 0.7
[1] = 3
[3] = 0



*Check dropout: better with 0.1
--------------------------------
RMS > 5
0

RMSE < 0.7
[0.05, 0.2] = 0
[0.1] = 2
[0.15] = 1


*Check dense_mid_size: better None or More instead of few, check more values NOT None
--------------------------------
RMS > 5
0

RMSE < 0.7
[None] = 1
[20] = 0
[30] = 1
[40] = 1





################################################

*Check optim: 
--------------------------------
inputs = 3: 
 adam : 0.2 < R2 < 0.65
 nadam : 0.7 < R2 < 0.85, 1 outlier -0.1
 RMSprop : 0.6 < R2 < 0.85, 1 outlier -0.3 at (units = 200, dense_mid = 50, inputs = 3)
 adam : 0.0022 < valid_loss < 0.0057
 nadam : 0.0017 < valid_loss < 0.0035
 RMSprop : 0.0017 < valid_loss < 0.0042
 adam : 1.2 < RMSE < 1.8
 nadam : 0.6 < RMSE < 1, 1 outlier 2.1 at (units = 200, dense_mid = None, inputs = 3)
 RMSprop : 0.6 < RMSE < 1.2, 1 outlier 2.1 at (units = 200, dense_mid = 50, inputs = 3)

inputs = 1: 
 adam : -0.8 < R2 < -0.3
 nadam : 0.1 < R2 < 0.9, 1 outlier -0.6
 RMSprop : 0.1 < R2 < 0.6, 1 outlier -0.4 at (units = 200, dense_mid = 50, inputs = 3)
 adam : 0.0027 < valid_loss < 0.0042
 nadam : 0.0015 < valid_loss < 0.0035
 RMSprop : 0.0017 < valid_loss < 0.0040, 1 outlier 0.0085
 adam : 2.3 < RMSE < 2.7
 nadam : 0.6 < RMSE < 2.6, 1 outlier 2.1 at (units = 200, dense_mid = None, inputs = 3)
 RMSprop : 1.4 < RMSE < 2.4, 1 outlier 2.1 at (units = 200, dense_mid = 50, inputs = 3)

discard adam

*best models according to RMSE and R2-Score
(units=, optim=, dense_mid=, inputs=) -> [R2=, RMSE=]

(units=200, optim=nadam, dense_mid=50, inputs=3) -> [R2=0.824, RMSE=0.82]
(units=100, optim=nadam, dense_mid=50, inputs=3) -> [R2=0.885, RMSE=0.664]
(units=100, optim=RMSprop, dense_mid=50, inputs=3) -> [R2=0.823, RMSE=0.824]
(units=100, optim=RMSprop, dense_mid=None, inputs=3) -> [R2=0.886, RMSE=0.661]

(units=200, optim=nadam, dense_mid=50, inputs=1) -> [R2=0.81, RMSE=0.874]
(units=100, optim=nadam, dense_mid=50, inputs=1) -> [R2=0.899, RMSE=0.637]

################################################

*Check batch_size: discard batch_size = 10
--------------------------------
RMSE > 5
[10] : 2
[20,30] : 1

RMSE < 0.7
[10] : 0
[20] : 3
[30] : 4

*Check seq_length: test more for [20,30]
--------------------------------
RMSE > 5
[10] : 2
[20,30] : 1

RMSE < 0.7
[10] : 0
[20] : 3
[30] : 4




################################################
CHAMPION MODELS
################################################

Exp 9
fun-bass-942
trusting-crane-275

Exp 8
unleashed-bird-189

Exp 7
carefree-snipe-956

Exp 6
calm-yak-301